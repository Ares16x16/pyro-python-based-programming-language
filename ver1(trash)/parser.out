Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> IDENTIFIER ASSIGN expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MULTIPLY expression
Rule 4     expression -> INT
Rule 5     expression -> IDENTIFIER
Rule 6     statement -> PRINT expression
Rule 7     program -> BEGIN statement_list END
Rule 8     statement_list -> statement_list statement
Rule 9     statement_list -> statement

Terminals, with rules where they appear

ASSIGN               : 1
BEGIN                : 7
END                  : 7
IDENTIFIER           : 1 5
INT                  : 4
MULTIPLY             : 3
PLUS                 : 2
PRINT                : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 6
program              : 
statement            : 8 9 0
statement_list       : 7 8

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . IDENTIFIER ASSIGN expression
    (6) statement -> . PRINT expression

    IDENTIFIER      shift and go to state 2
    PRINT           shift and go to state 3

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 4


state 3

    (6) statement -> PRINT . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . INT
    (5) expression -> . IDENTIFIER

    INT             shift and go to state 6
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 5

state 4

    (1) statement -> IDENTIFIER ASSIGN . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . INT
    (5) expression -> . IDENTIFIER

    INT             shift and go to state 6
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 8

state 5

    (6) statement -> PRINT expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MULTIPLY expression

    $end            reduce using rule 6 (statement -> PRINT expression .)
    PLUS            shift and go to state 9
    MULTIPLY        shift and go to state 10


state 6

    (4) expression -> INT .

    PLUS            reduce using rule 4 (expression -> INT .)
    MULTIPLY        reduce using rule 4 (expression -> INT .)
    $end            reduce using rule 4 (expression -> INT .)


state 7

    (5) expression -> IDENTIFIER .

    PLUS            reduce using rule 5 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 5 (expression -> IDENTIFIER .)
    $end            reduce using rule 5 (expression -> IDENTIFIER .)


state 8

    (1) statement -> IDENTIFIER ASSIGN expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MULTIPLY expression

    $end            reduce using rule 1 (statement -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 9
    MULTIPLY        shift and go to state 10


state 9

    (2) expression -> expression PLUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . INT
    (5) expression -> . IDENTIFIER

    INT             shift and go to state 6
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 11

state 10

    (3) expression -> expression MULTIPLY . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . INT
    (5) expression -> . IDENTIFIER

    INT             shift and go to state 6
    IDENTIFIER      shift and go to state 7

    expression                     shift and go to state 12

state 11

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MULTIPLY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 9
    MULTIPLY        shift and go to state 10

  ! PLUS            [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> expression PLUS expression .) ]


state 12

    (3) expression -> expression MULTIPLY expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MULTIPLY expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    $end            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 9
    MULTIPLY        shift and go to state 10

  ! PLUS            [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 12 resolved as shift
